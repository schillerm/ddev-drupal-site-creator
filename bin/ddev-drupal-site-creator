#!/usr/bin/env bash

# Uncomment to do clears, comment out to run with no clears, see all output.
clear_toggle="on"

function select_option {

  # little helpers for terminal print control and key input
  ESC=$(printf "\033")
  cursor_blink_on() { printf "$ESC[?25h"; }
  cursor_blink_off() { printf "$ESC[?25l"; }
  cursor_to() { printf "$ESC[$1;${2:-1}H"; }
  print_option() { printf "   $1 "; }
  print_selected() { printf "  $ESC[7m $1 $ESC[27m"; }
  get_cursor_row() {
    IFS=';' read -sdR -p $'\E[6n' ROW COL
    echo ${ROW#*[}
  }
  key_input() {
    read -s -n3 key 2>/dev/null >&2
    if [[ $key = $ESC[A ]]; then echo up; fi
    if [[ $key = $ESC[B ]]; then echo down; fi
    if [[ $key = "" ]]; then echo enter; fi
  }

  # initially print empty new lines (scroll down if at bottom of screen)
  for opt; do printf "\n"; done

  # determine current screen position for overwriting the options
  local lastrow=$(get_cursor_row)
  local startrow=$(($lastrow - $#))

  # ensure cursor and input echoing back on upon a ctrl+c during read -s
  trap "cursor_blink_on; stty echo; printf '\n'; exit" 2
  cursor_blink_off

  local selected=0
  while true; do
    # print options by overwriting the last lines
    local idx=0
    for opt; do
      cursor_to $(($startrow + $idx))
      if [ $idx -eq $selected ]; then
        print_selected "$opt"
      else
        print_option "$opt"
      fi
      ((idx++))
    done

    # user key control
    case $(key_input) in
    enter) break ;;
    up)
      ((selected--))
      if [ $selected -lt 0 ]; then selected=$(($# - 1)); fi
      ;;
    down)
      ((selected++))
      if [ $selected -ge $# ]; then selected=0; fi
      ;;
    esac
  done

  # cursor position back to normal
  cursor_to $lastrow
  printf "\n"
  cursor_blink_on

  return $selected
}

function get_basic_drupal_version {
  echo -e "${blue}Creating new DDev Drupal site${reset}"
  echo -e " "
  echo "Select a Drupal version"
  echo
  d_options=(
    11
    10
    9
    8
  )

  select_option "${d_options[@]}"
  d_choice=$?
  basic_drupal_version="${d_options[d_choice]}"

  if [[ "$clear_toggle" == "on" ]]; then
    clear
  fi
}

function get_site_details() {
  if [[ "$clear_toggle" == "on" ]]; then
    clear
  fi
  # Sitename
  # Loop until valid input is provided
  echo -e "${blue}Creating new DDev Drupal site${reset}"
  echo -e " "

  while true; do
    read -p 'Sitename [Dev] : ' initial_sitename
    initial_sitename="${initial_sitename:-Dev}"

    # Validate: first character must be a letter, rest can be alphanumeric or hyphen
    if [[ "$initial_sitename" =~ ^[a-zA-Z][a-zA-Z0-9-]*$ ]]; then
      break
    else
      echo "Invalid sitename. It must start with a letter and contain only letters, numbers, or hyphens."
    fi
  done

  if [[ "$clear_toggle" == "on" ]]; then
    clear
  fi

  if [[ -n "$issue_number" ]]; then
    # Issue number exists offer the option to include this in the sitename

    echo -e "${blue}Creating new DDev Drupal site${reset}"
    echo -e " "
    echo "Do you want to suffix the issue number in the sitename?"
    echo
    suffix_issue_number_options=(
      Yes
      No
    )

    select_option "${suffix_issue_number_options[@]}"
    suffix_issue_number_options_choice=$?
    suffix_issue_number_choice="${suffix_issue_number_options[$suffix_issue_number_options_choice]}"

    if [[ "$clear_toggle" == "on" ]]; then
      clear
    fi

  else
    # No issue number so offer random number instead
    if [[ "$clear_toggle" == "on" ]]; then
      clear
    fi
    echo -e "${blue}Creating new DDev Drupal site${reset}"
    echo -e " "
    echo "Do you want to suffix the sitename with 6 random digits?"
    echo
    suffix_digits_options=(
      Yes
      No
    )

    select_option "${suffix_digits_options[@]}"
    suffix_digits_options_choice=$?
    suffix_digits_choice="${suffix_digits_options[$suffix_digits_options_choice]}"

  fi

  if [[ "$clear_toggle" == "on" ]]; then
    clear
  fi
  echo -e "${blue}Creating new DDev Drupal site${reset}"
  echo -e ""
  echo "Do you want to add the drupal version to the site name?"
  echo
  add_drupal_version_to_sitename_options=(
    Yes
    No
  )

  select_option "${add_drupal_version_to_sitename_options[@]}"
  add_drupal_version_to_sitename_options_choice=$?
  add_drupal_version_to_choice="${add_drupal_version_to_sitename_options[$add_drupal_version_to_sitename_options_choice]}"

  if [[ "$clear_toggle" == "on" ]]; then
    clear
  fi

  ############# This section builds the sitename ###################

  if [ "$suffix_digits_choice" = "Yes" ] || [ "$suffix_issue_number_choice" = "Yes" ]; then

    if [ "$suffix_issue_number_choice" = "Yes" ]; then
      # Suffix sitename with the issue number
      if [ "$add_drupal_version_to_choice" = "Yes" ]; then
        sitename="${initial_sitename}-${basic_drupal_version}-${issue_number}"
      else
        sitename="${initial_sitename}-${issue_number}"
      fi
    else
      # else suffix sitename with a random number
      site_number=$(printf "%06d" $((RANDOM % 1000000)))
      if [ "$add_drupal_version_to_choice" = "Yes" ]; then
        sitename="${initial_sitename}-${basic_drupal_version}-${site_number}"
      else
        sitename="${initial_sitename}-${site_number}"
      fi

    fi

  else
    # Build sitename with no suffix
    sitename="${initial_sitename}"
    if [ "$add_drupal_version_to_choice" = "Yes" ]; then
      sitename="${initial_sitename}-${basic_drupal_version}"
    fi
  fi

  # End of build sitename section

  if [[ "$clear_toggle" == "on" ]]; then
    clear
  fi

  echo -e "${blue}Creating new DDev Drupal site${reset}"
  echo -e " "
  echo -e "Sitename : ${green}$sitename${reset}"

  default_site_title="${sitename//-/ }"

  while true; do
    #read -p "Site Title ["${default_site_title}"] : " site_title
    read -p "Site Title [${default_site_title}]: " site_title

    site_title=${site_title:-"$default_site_title"}

    # Trim to first 100 characters
    site_title="${site_title:0:100}"

    # Sanitize: remove unsafe characters
    sanitized_title=$(echo "$site_title" | sed 's/[^a-zA-Z0-9 ._-]//g')

    # Check if sanitized version is equal to input and not empty
    if [[ "$sanitized_title" == "$site_title" && -n "$site_title" ]]; then
      break
    else
      echo "Invalid site title. Only letters, numbers, spaces, dashes, underscores, and dots are allowed. Max length: 100 characters."
    fi
  done

  # Sanitize the site title
  sanitize_site_title() {
    local input="$1"

    # Trim leading/trailing whitespace
    input="$(echo "$input" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')"

    # Remove control characters (non-printable)
    input="$(echo "$input" | tr -dC '[:print:]')"

    # Replace dangerous shell characters with dashes or nothing
    input="$(echo "$input" | sed 's/["'\''`\\$&<>|]/-/g')"

    echo "$input"
  }

  sanitized_title=$(sanitize_site_title "$site_title")

  # Optional: confirm valid title
  echo "Using site title: '$site_title'"

  if [[ "$clear_toggle" == "on" ]]; then
    clear
  fi

  echo -e "${blue}Creating new DDev Drupal site${reset}"
  echo -e " "
  echo -e "Sitename : ${green}$sitename${reset}"
  echo -e "Site Title : ${green}$site_title${reset}"

  while true; do
    read -p "Username [admin]: " username
    username="${username:-admin}"

    # Check: valid characters and length (3 to 60)
    if [[ "$username" =~ ^[a-zA-Z0-9._-]{3,60}$ ]]; then
      break
    else
      echo "Invalid username. Use 3–60 characters: letters, numbers, dot (.), dash (-), or underscore (_)."
    fi
  done

  echo "Using username: $username"

  if [[ "$clear_toggle" == "on" ]]; then
    clear
  fi
  echo -e "${blue}Creating new DDev Drupal site${reset}"
  echo -e " "
  echo -e "Sitename : ${green}$sitename${reset}"
  echo -e "Site Title : ${green}$site_title${reset}"
  echo -e "Username : ${green}$username${reset}"

  while true; do
    read -p 'Email [someone@example.com]: ' email
    email="${email:-someone@example.com}"
    if [ -z "$email" ]; then
      echo "Please enter an email address!"
    else
      break
    fi
  done

  if [[ "$clear_toggle" == "on" ]]; then
    clear
  fi
  echo -e "${blue}Creating new DDev Drupal site${reset}"
  echo -e " "
  echo -e "Sitename : ${green}$sitename${reset}"
  echo -e "Site Title : ${green}$site_title${reset}"
  echo -e "Username : ${green}$username${reset}"
  echo -e "Email : ${green}$email${reset}"

  while true; do
    read -p 'Password [admin]: ' password
    password="${password:-admin}"
    if [ -z "$password" ]; then
      echo "Please enter a password!"
    else
      break
    fi
  done

}

function get_drupal_version() {
  if [[ "$clear_toggle" == "on" ]]; then
    clear
  fi
  case "$1" in
  "11")
    echo -e "${blue}Creating new DDev Drupal site${reset}"
    echo -e " "
    echo "Select a Drupal 11 version"
    echo
    d11_options=(
      11.x-dev
      11.1.6
      11.1.5
      11.1.4
      11.1.3
      11.1.2
      11.1.1
      11.1.0
      11.0.13
      11.0.12
      11.0.11
      11.0.10
      11.0.9
      11.0.8
      11.0.7
      11.0.6
      11.0.5
      11.0.4
      11.0.3
      11.0.2
      11.0.1
      11.0.0
    )

    select_option "${d11_options[@]}"
    d11_choice=$?
    drupal_version="${d11_options[d11_choice]}"
    ;;
  "10")
    echo -e "${blue}Creating new DDev Drupal site${reset}"
    echo -e " "
    echo "Select a Drupal 10 version"
    echo
    d10_options=(
      10.4.0
      10.3.0
      10.2.0
      10.1.0
      10.0.0
    )

    select_option "${d10_options[@]}"
    d10_choice=$?
    drupal_version="${d10_options[d10_choice]}"
    ;;
  "9")
    echo -e "${blue}Creating new DDev Drupal site${reset}"
    echo -e " "
    echo "Select a Drupal 9 version"
    echo
    d9_options=(
      9.5.0
      9.4.0
      9.3.0
      9.2.0
      9.1.0
      9.0.0
    )

    select_option "${d9_options[@]}"
    d9_choice=$?
    drupal_version="${d9_options[d9_choice]}"
    ;;
  "8")
    echo -e "${blue}Creating new DDev Drupal site${reset}"
    echo -e " "
    echo "Select a Drupal 8 version"
    echo
    d8_options=(
      8.9.0
      8.8.0
    )

    select_option "${d8_options[@]}"
    d8_choice=$?
    drupal_version="${d8_options[d8_choice]}"
    ;;

  esac

  if [[ "$clear_toggle" == "on" ]]; then
    clear
  fi

}

function get_php_version {
  case "$drupal_version" in
  "11.x-dev" | "11.1.7" | "11.1.6" | "11.1.5" | "11.1.4" | "11.1.3" | "11.1.2" | "11.1.1" | "11.1.0")
    php_options=(
      8.4
      8.3
    )
    ;;

  "11.0.13" | "11.0.12" | "11.0.11" | "11.0.10" | "11.0.9" | "11.0.8" | "11.0.7" | "11.0.6" | "11.0.5" | "11.0.4" | "11.0.3" | "11.0.2" | "11.0.1" | "11.0.0")
    php_options=(
      8.3
    )
    ;;

  "10.4.0")
    php_options=(
      8.4
      8.3
      8.2
      8.1
    )
    ;;

  "10.3.0")
    php_options=(
      8.3
      8.2
      8.1
    )
    ;;

  "10.2.0")
    php_options=(
      8.3
      8.2
      8.1
    )
    ;;

  "10.1.0" | "10.0.0")
    php_options=(
      8.2
      8.1
    )
    ;;

  "9.5.0")
    php_options=(
      8.1
      8.0
      7.4
    )
    ;;

  "9.4.0")
    php_options=(
      8.1
      8.0
      7.4
      7.3
    )
    ;;

  "9.3.0" | "9.2.0" | "9.1.0")
    php_options=(
      8.0
      7.4
      7.3
    )
    ;;

  "9.0.0")
    php_options=(
      8.0
      7.4
      7.3
    )
    ;;

  "8.9.0")
    php_options=(
      7.4
      7.3
      7.2
    )
    ;;

  "8.8.0")
    php_options=(
      7.3
      7.2
      7.1
    )
    ;;

  *)
    echo "Selected version not explicitly handled, you chose: ${options[$choice]}"
    php_options=(
      8.4
      8.3
      8.2
      8.1
      8.0
      7.4
    )
    ;;
  esac

  echo -e "${blue}Creating new DDev Drupal site${reset}"
  echo -e " "
  echo "Select a PHP version"
  echo
  select_option "${php_options[@]}"
  php_choice=$?
  php_version="${php_options[$php_choice]}"
}

function get_drush_version() {

  if [[ -z "$drupal_version" && -n "$1" ]]; then
    drupal_version="$1"
  fi

  case "$drupal_version" in
  "11" | "11.1.6" | "11.1.5" | "11.1.4" | "11.1.3" | "11.1.2" | "11.1.1" | "11.1.0")
    drush_version=13
    ;;

  "11.0.0" | "11.0.1" | "11.0.2" | "11.0.3" | "11.0.4" | "11.0.5" | "11.0.6" | "11.0.7" | "11.0.8" | "11.0.9" | "11.0.10" | "11.0.11" | "11.0.12" | "11.0.13")
    if [[ "$clear_toggle" == "on" ]]; then
      clear
    fi
    echo -e "${blue}Creating new DDev Drupal site${reset}"
    echo -e " "
    echo "Select a Drush version"
    drush_versions=(
      13
      12
    )
    select_option "${drush_versions[@]}"
    drush_choice=$?
    drush_version="${drush_versions[$drush_choice]}"
    ;;

  "10.2.0" | "10.3.0" | "10.4.0" | "10")
    drush_version=12
    ;;

  "10.0.0" | "10.1.0")
    drush_version=11
    ;;

  "9.4.0" | "9.5.0" | "9")
    drush_version=10
    ;;

  "9.0.0" | "9.1.0" | "9.2.0" | "9.3.0")
    drush_version=9
    ;;

  "8.4.0" | "8.5.0" | "8.6.0" | "8.7.0" | "8.8.0" | "8.9.0" | "8")
    drush_version=9
    ;;

  "8.0.0" | "8.1.0" | "8.2.0" | "8.3.0")
    drush_version=8
    ;;

  *)
    echo "Unknown or unsupported Drupal version: $drupal_version"
    drush_versions=()
    ;;
  esac
}

function make_site_folder() {

  mkdir "$1"
  cd "$1"

}

function install_drush() {
  if [ "$basic_drupal_version" = "11" ]; then
    ddev composer require drush/drush
  else
    local version="$1"
    ddev composer require "drush/drush:^${version}"
  fi
}

function get_dev_modules {
  if [[ "$clear_toggle" == "on" ]]; then
    clear
  fi
  echo -e "${blue}Creating new DDev Drupal site${reset}"
  echo -e " "
  echo -e "Do you want development modules installed?\n\nIncluding composer-patches, core-dev, devel, examples, admin_toolbar, webprofiler"
  echo
  dev_modules_options=(
    Yes
    No
  )

  select_option "${dev_modules_options[@]}"
  dev_modules_options_choice=$?
  dev_modules="${dev_modules_options[$dev_modules_options_choice]}"
}

function get_theme_type() {
  if [[ "$clear_toggle" == "on" ]]; then
    clear
  fi
  local theme="$1"
  echo -e "${blue}Creating new DDev Drupal site${reset}"
  echo -e " "
  echo -e "Is this ${theme} theme an admin or regular theme? Sorry but there is no way to find this out expect by asking (maybe use AI in the future)."
  echo
  theme_type_options=(
    Regular
    Admin
  )

  select_option "${theme_type_options[@]}"
  theme_type_options_choice=$?
  theme_type="${theme_type_options[$theme_type_options_choice]}"
}

function install_dev_modules {
  # Install and enable useful dev modules
  ddev composer require cweagans/composer-patches
  ddev composer require drupal/core-dev --dev --update-with-all-dependencies
  ddev composer require drupal/devel --dev
  ddev composer require drupal/admin_toolbar --dev
  ddev composer require drupal/examples --dev
  ddev composer require drupal/webprofiler --dev

  ddev drush en admin_toolbar
  ddev drush en devel
  ddev drush en devel_generate
  ddev drush en examples
  ddev drush en webprofiler -y
}

function get_dev_things {
  if [[ "$clear_toggle" == "on" ]]; then
    clear
  fi

  echo -e "${blue}Creating new DDev Drupal site${reset}"
  echo -e " "
  echo -e "Do you want other development settings enabled?\n\nTwig development mode, JS and CSS aggregation, render cache, dynamic page cache, and page cache are bypassed."
  echo
  dev_things_options=(
    Yes
    No
  )

  select_option "${dev_things_options[@]}"
  dev_things_options_choice=$?
  dev_things="${dev_things_options[$dev_things_options_choice]}"

  if [[ "$clear_toggle" == "on" ]]; then
    clear
  fi
}

function set_dev_things {
  # Allow plugin sources
  ddev composer config allow-plugins.tbachert/spi true
  ddev composer config allow-plugins.cweagans/composer-patches true

  # Configure development settings
  ddev drush -y config-set system.performance js.preprocess 0
  ddev drush -y config-set system.performance css.preprocess 0
  ddev drush config:set system.theme twig_debug TRUE --yes

  # Enable twig development mode and do not cache markup
  ddev drush php:eval "\Drupal::keyValue('development_settings')->setMultiple(['disable_rendered_output_cache_bins' => TRUE, 'twig_debug' => TRUE, 'twig_cache_disable' => TRUE]);"
}

function get_custom_module {
  if [[ "$clear_toggle" == "on" ]]; then
    clear
  fi

  echo -e "${blue}Creating new DDev Drupal site${reset}"
  echo -e " "
  echo "Do you want a custom module set up?"
  echo
  custom_module_options=(
    No
    Yes
  )

  select_option "${custom_module_options[@]}"
  custom_module_options_choice=$?
  custom_module="${custom_module_options[$custom_module_options_choice]}"
}

function create_custom_module {
  module_name="${sitename}-module"
  module_name="${module_name,,}"
  module_name="${module_name//-/_}"

  # Run the drush generate command to create the module
  ddev drush generate -q module \
    --answer="Test module" \
    --answer="$module_name" \
    --answer="My test module" \
    --answer="Custom" \
    --answer="" \
    --answer="Yes" \
    --answer="Yes" \
    --answer="No"

  # Create module folders
  cd "web/modules/custom/$module_name"
  mkdir js
  mkdir css
  mkdir config
  mkdir config/install
  mkdir src
  mkdir src/Controller
  cd ../../../../

  ddev drush en "$module_name"
}

function get_custom_theme {
  if [[ "$clear_toggle" == "on" ]]; then
    clear
  fi
  echo -e "${blue}Creating new DDev Drupal site${reset}"
  echo -e " "
  echo "Do you want a custom theme set up?"
  echo
  custom_theme_options=(
    No
    Yes
  )

  select_option "${custom_theme_options[@]}"
  custom_theme_options_choice=$?
  custom_theme="${custom_theme_options[$custom_theme_options_choice]}"

}

function create_custom_theme {
  theme_name="${sitename}-theme"
  theme_name="${theme_name,,}"
  theme_name="${theme_name//-/_}"

  ddev drush generate -q theme \
    --answer="Test Theme" \
    --answer="$theme_name" \
    --answer="Olivero" \
    --answer="My test theme" \
    --answer="Custom" \
    --answer="No" \
    --answer="No"

  rm "web/themes/custom/$theme_name/css/base/elements.css"
  rm "web/themes/custom/$theme_name/css/layout/layout.css"
  rm "web/themes/custom/$theme_name/css/component/block.css"
  rm "web/themes/custom/$theme_name/css/component/tabs.css"
  rm "web/themes/custom/$theme_name/css/component/breadcrumb.css"
  rm "web/themes/custom/$theme_name/css/component/field.css"
  rm "web/themes/custom/$theme_name/css/component/header.css"
  rm "web/themes/custom/$theme_name/css/component/form.css"
  rm "web/themes/custom/$theme_name/css/component/buttons.css"
  rm "web/themes/custom/$theme_name/css/component/table.css"
  rm "web/themes/custom/$theme_name/css/component/messages.css"
  rm "web/themes/custom/$theme_name/css/component/sidebar.css"
  rm "web/themes/custom/$theme_name/css/component/node.css"
  rm "web/themes/custom/$theme_name/css/component/menu.css"
  rm "web/themes/custom/$theme_name/css/theme/print.css"

  # Create theme folders
  mkdir "web/themes/custom/$theme_name/config"
  mkdir "web/themes/custom/$theme_name/config/install"

  # Copy theme regions over
  SOURCE_FILE=web/core/themes/olivero/olivero.info.yml
  TARGET_FILE=web/themes/custom/$theme_name/$theme_name.info.yml
  yq eval ".regions = load(\"$SOURCE_FILE\").regions" "$TARGET_FILE" -i

  # Enable the theme and set as default
  ddev drush theme:enable $theme_name
  ddev drush config:set $theme_name.settings logo.use_default 0 -y
  ddev drush config:set system.theme default $theme_name -y
}

function get_git {
  if [[ "$clear_toggle" == "on" ]]; then
    clear
  fi
  echo -e "${blue}Creating new DDev Drupal site${reset}"
  echo -e " "
  echo "Do you want to initalize a git repo?"
  echo
  git_options=(
    Yes
    No
  )
  select_option "${git_options[@]}"
  git_options_choice=$?
  git_choice="${git_options[$git_options_choice]}"

  if [ "$git_choice" = "Yes" ]; then
    # Initalize git repo
    git init
    git branch -M main
    # Copy .gitignore over
    cp ../Extras/.gitignore .gitignore
  fi

  if [[ "$clear_toggle" == "on" ]]; then
    clear
  fi
}

function git_add_and_commit {
  if [ "$git_choice" = "Yes" ]; then
    git add .
    git commit -m "Initial commit" -q
  fi
}

function make_folders_copy_files {
  # Create the modules custom directory
  mkdir -p web/modules/custom

  # Create the modules contrib directory
  mkdir -p web/modules/contrib

  # Create the themes custom directory
  mkdir -p web/themes/custom

  # Create the themes contrib directory
  mkdir -p web/themes/contrib

  # Create the config directory
  mkdir -p config

  # Create the config/default directory
  mkdir -p config/default

  # Create the config/default/sync directory
  mkdir -p config/default/sync

  # Create the private directory
  mkdir -p private

  # Create the .vscode directory
  mkdir -p .vscode

  # copy vscode file over
  cp ../Extras/launch.json .vscode/launch.json

  # Copy phpstan.neon over
  cp ../Extras/phpstan.neon phpstan.neon
}

function change_settings {
  echo "\$settings['config_sync_directory'] = '../config/default/sync';" >>"web/sites/default/settings.php"
  echo "\$settings['file_private_path'] = '../private';" >>"web/sites/default/settings.php"
  echo "\$settings['skip_permissions_hardening'] = FALSE;" >>"web/sites/default/settings.php"
}

function set_permissions {
  # Set the permissions
  chmod 644 "web/sites/default/settings.php"
  chmod 755 "web/sites/default"
}

function enable_phpmyadmin {
  # Enable phpmyadmin in DDev
  yes | ddev phpmyadmin
}

function export_config {
  # Export config
  ddev drush cex -y
}

function get_dcms_install {
  if [[ "$clear_toggle" == "on" ]]; then
    clear
  fi
  echo -e "${blue}Creating new DDev Drupal site${reset}"
  echo -e " "
  echo "Do you want to go through the site install steps in Drupal CMS site GUI, or automate it using this script?"
  echo
  dcms_auto_install_options=(
    "Install using Drupal CMS"
    "Use this script"
  )

  select_option "${dcms_auto_install_options[@]}"
  dcms_auto_install_options_choice=$?
  dcms_install="${dcms_auto_install_options[$dcms_auto_install_options_choice]}"
}

function get_project_stable_version() {

  # Add a project root
  PROJECT_ROOT="$HOME/.config/composer/vendor/schillerm/ddev-drupal-site-creator/bin"

  # Grab json object all about this project
  module_info=$(composer show "drupal/${project_name}" --format=json -all --working-dir="$PROJECT_ROOT")

  # Extract all the versions
  mapfile -t versions < <(echo "$module_info" | jq -r '.versions[]')

  # Get the first item in the versions array
  latest_version="${versions[0]}"

  # Need to check if the version begins with old style versioning (eg 8.x-1.x-dev rather than 1.x-dev)

  # Test if page for the old version exists.
  old_style_version_url="https://www.drupal.org/project/${project_name}/releases/8.x-${latest_version}"

  # Get the status code for that url
  old_style_version_url_status_code=$(curl -o /dev/null -s -w "%{http_code}" "$old_style_version_url")

  # If old style version exists then change the latest_version to be that.
  if [[ "$old_style_version_url_status_code" == "200" ]]; then
    latest_version="8.x-${latest_version}"
  fi

}

function get_project_latest_drupal_version {

  export PROJECT_NAME="$project_name"
  export LATEST_VERSION="$latest_version"

  release_history_page=$(curl -s "https://updates.drupal.org/release-history/${PROJECT_NAME}/current")

  core_compatibility=$(echo "$release_history_page" | yq -p=xml -o=y ".project.releases.release | map(select(.version == \"$LATEST_VERSION\")) | .[0].core_compatibility")

  # Set $latest_drupal_version (Major version supported by this project)
  latest_drupal_version=$(echo "$core_compatibility" |
    tr '|' '\n' |
    sed 's/[^0-9.]*//g' |
    grep -Ev '^12(\.|$)' |
    sort -V |
    tail -n1)

  # Set $basic_drupal_version (Major version supported by this project)
  basic_drupal_version=$(echo "$latest_drupal_version" | cut -d. -f1)

}

function get_issue_url {

  if [[ "$clear_toggle" == "on" ]]; then
    clear
  fi

  # Ask for issue url
  while true; do
    echo -e "${blue}Creating new DDev Drupal site${reset}"
    echo -e " "
    read -p 'Issue URL [] : ' issue_url
    # Validate against expected Drupal.org issue URL format
    if [[ "$issue_url" =~ ^https:\/\/www\.drupal\.org\/project\/([a-zA-Z0-9_\-]+)\/issues\/([0-9]{1,8})$ ]]; then
      # Extract using BASH_REMATCH from the regex
      project_name="${BASH_REMATCH[1]}"
      issue_number="${BASH_REMATCH[2]}"
      break
    else
      echo "Invalid input. Issue URL must match:"
      echo "https://www.drupal.org/project/[project-name]/issues/[issue-number]"
    fi
  done

  # Build Drupal.org API url
  p_url="https://www.drupal.org/api-d7/node.json?field_project_machine_name=${project_name}"

  MT_project_type_raw=$(curl -s "$p_url" | jq -r '.list[0].type')
  project_url=$(curl -s "$p_url" | jq -r '.list[0].url')

  # Set the project type ..
  case "$MT_project_type_raw" in
  "project_module")
    MT_project_type="modules"
    ;;
  "project_theme")
    MT_project_type="themes"
    ;;
  "project_core")
    MT_project_type="core"
    ;;
  *)
    echo "Unknown project type (not core, theme or a module issue) : $MT_project_type_raw"
    ;;
  esac

}

function is_a_theme_required {

  # Remove the -dev bit from the end of latest_version
  if [[ "$latest_version" == *-dev ]]; then
    trimmed_version="${latest_version%-dev}"
  fi

  # Build the drupalcode url
  module_install_file_url="https://git.drupalcode.org/project/${project_name}/-/raw/${trimmed_version}/${project_name}.install"

  # Download and grep for lines including themeExists
  theme_exists=$(curl -s "$module_install_file_url" | grep -Ei 'themeExists')

  if [[ -n "$theme_exists" ]]; then

    # Get theme name
    theme_name=$(echo "${theme_exists}" | grep -oP "themeExists\('\K[^']+")

    # return theme name
    echo "$theme_name"
  else

    # return not found 'no'
    echo "no"
  fi
}

function check_command() {
  if ! command -v "$1" >/dev/null 2>&1; then
    echo "ERROR: '$1' is not installed or not in PATH"
    exit 1
  else
    echo "'$1' is installed"
  fi
}

function check_python_package() {
  if ! python3 -c "import $1" >/dev/null 2>&1; then
    echo "ERROR: Python package '$1' is not installed"
    echo "Try: pip3 install $1"
    exit 1
  else
    echo "Python package '$1' is installed"
  fi
}

function check_prerequisites {
  # Exit immediately if any command fails
  set -e

  # Exit on error within functions, pipelines, or subshells
  set -o pipefail

  echo "Checking required tools and packages..."
  echo -e ""

  check_command ddev
  check_command composer
  check_command git
  check_command python3
  check_command yq
  #check_python_package bs4 # for Beautiful Soup 4

  # Turn the exit condition off so rest of the script can run ok
  set +e
  echo -e ""
  echo "All dependencies are satisfied. Proceeding..."
  echo -e ""

  if [[ "$clear_toggle" == "on" ]]; then
    clear
  fi

}

#############################################################

red="\e[0;91m"
green="\e[0;92m"
blue="\e[0;94m"
reset="\e[0m"

#############################################################
# Check for installed software first..

# ANSI Escape Codes for retro green
GREEN='\033[0;32m'
BOLD='\033[1m'
NC='\033[0m'

# Clear screen and set up the retro atmosphere
if [[ "$clear_toggle" == "on" ]]; then
  clear
fi

# Display opening title
if command -v figlet >/dev/null 2>&1; then
  echo -e "${GREEN}${BOLD}"
  figlet -f small "DDev Drupal Site creator"
  echo -e "${NC}"
else
  echo "==== DDev Drupal Site creator ===="
fi

# Progress bar
for i in {1..100}; do
  echo -ne "${GREEN}▓"
  sleep 0.01
done
echo -e "${NC}\n"

# Checking prerequisites
check_prerequisites

##############################################################

# Make the site outside of project root

# cd ../../

##############################################################

if [[ "$clear_toggle" == "on" ]]; then
  clear
fi
echo -e "${blue}Creating new DDev Drupal site${reset}"
echo -e " "
echo "What type of install is this?"
echo
drupal_install_options=(
  'Drupal site'
  'Drupal CMS site'
  'Drupal site based on an issue'
)

select_option "${drupal_install_options[@]}"
drupal_install_options_choice=$?
drupal_install="${drupal_install_options[$drupal_install_options_choice]}"

if [[ "$clear_toggle" == "on" ]]; then
  clear
fi

#########################################################

if [ "$drupal_install" = "Drupal site" ]; then
  get_basic_drupal_version
  get_site_details
  get_drupal_version "$basic_drupal_version"
  get_php_version
  get_drush_version ""
  make_site_folder "$sitename"

  project_type="drupal${basic_drupal_version}"
  ddev config --project-type="$project_type" --docroot=web

  ddev composer create-project "drupal/recommended-project:^${drupal_version}"

  ddev start
  install_drush "$drush_version"
  ddev drush site:install --account-name=$username --account-pass=$password -y --site-name=$sitename
  ddev drush config:set system.site name "$sanitized_title" --yes

  make_folders_copy_files

  get_dev_modules
  get_dev_things

  if [ "$dev_things" = "Yes" ]; then
    set_dev_things
  fi

  if [ "${dev_modules}" = "Yes" ]; then
    install_dev_modules
  fi

  get_custom_module
  if [ "${custom_module}" = "Yes" ]; then
    create_custom_module
  fi

  get_custom_theme
  if [ "${custom_theme}" = "Yes" ]; then
    create_custom_theme
  fi

  get_git

  change_settings
  set_permissions
  export_config

  ddev drush cr

  enable_phpmyadmin
  yes | ddev restart
  git_add_and_commit

  if command -v figlet >/dev/null 2>&1; then
    echo -e "${GREEN}${BOLD}"
    figlet -f small "Finished"
    echo -e "${NC}"
  else
    echo "==== Finished ===="
  fi


fi

#########################################################

if [ "$drupal_install" = "Drupal CMS site" ]; then
  get_dcms_install
  if [ "$dcms_install" = "Use this script" ]; then
    get_site_details
    make_site_folder "$sitename"
    ddev config --project-type=drupal11 --docroot=web
    ddev start
    ddev composer create-project drupal/cms
    ddev drush site:install --account-name=$username --account-pass=$password -y --site-name=$sitename
    ddev drush config:set system.site name "$sanitized_title" --yes
  fi
  if [ "$dcms_install" = "Install using Drupal CMS" ]; then
    make_site_folder "drupal"
    ddev config --project-type=drupal11 --docroot=web
    ddev start
    ddev composer create-project drupal/cms
  fi
fi

#########################################################

if [ "$drupal_install" = "Drupal site based on an issue" ]; then
  get_issue_url

  case "$MT_project_type" in
  core)
    # Install using justafish/ddev-drupal-core-dev and issue fork

    # Setting up repository for the first time
    git clone https://git.drupalcode.org/project/drupal.git "$project_name"
    cd "$project_name"

    # Config ddev
    ddev config --omit-containers=db --disable-settings-management

    # Run a composer install
    ddev composer install

    # Get ddev-core-dev add on
    ddev add-on get justafish/ddev-drupal-core-dev

    # Run a site install
    ddev drupal install standard

    # Add & fetch this issue fork’s repository
    git remote add "${project_name}-${issue_number}" \
      "git@git.drupal.org:issue/${project_name}-${issue_number}.git"

    # git fetch
    git fetch "${project_name}-${issue_number}"

    search_pattern="${project_name}-${issue_number}/${issue_number}-"

    issue_branch=$(git branch -r | grep "${search_pattern}" | head -n 1 | sed 's/^[ *]*//')

    # Set the link_text
    link_text="${issue_branch#*/}"

    # Check out the branch
    git checkout -b "${link_text}" --track "${project_name}-${issue_number}/${link_text}"

    if command -v figlet >/dev/null 2>&1; then
      echo -e "${GREEN}${BOLD}"
      figlet -f small "Finished"
      echo -e "${NC}"
    else
      echo "==== Finished ===="
    fi
    ;;
  modules)
    get_project_stable_version
    get_project_latest_drupal_version

    get_site_details "$basic_drupal_version"
    make_site_folder "$sitename"

    project_type="drupal${basic_drupal_version}"
    ddev config --project-type="$project_type" --docroot=web
    ddev start

    recommended_project="recommended-project:^${basic_drupal_version}"
    ddev composer create-project "drupal/${recommended_project}"

    get_drush_version "$basic_drupal_version"
    install_drush "$drush_version"

    ddev drush site:install --account-name=$username --account-pass=$password -y --site-name=$sitename
    ddev drush config:set system.site name "$sanitized_title" --yes

    make_folders_copy_files

    # Go into contrib folder and clone issue module or theme
    cd "web/${MT_project_type}/contrib/"

    # Setting up repository for the first time
    git_clone_url="https://git.drupalcode.org/project/${project_name}.git"

    # Setting up repository for the first time
    git clone ${git_clone_url}
    cd ${project_name}

    # Try Add & fetch this issue fork’s repository
    if git remote add "${project_name}-${issue_number}" "git@git.drupal.org:issue/${project_name}-${issue_number}.git" > /dev/null 2>&1; then

      if git fetch "${project_name}-${issue_number}" > /dev/null 2>&1; then

      # Set the remote name
      remote_name="${project_name}-${issue_number}"

      # Get remote branch with the latest commit
      issue_branch=$(git for-each-ref --sort=-committerdate \
        --format='%(refname:short)' \
        "refs/remotes/${remote_name}/" | head -n 1)

      # Set the link_text
      link_text="${issue_branch#*/}"

      # Check out this branch for the first time
      git checkout -b "${link_text}" --track "${issue_branch}"

      fi

    else
      echo "❌ Issue branch not found!"
    fi

    # CD back out of the directory
    cd ../../../../

    # Get dependencies from composer show
    module_info=$(ddev composer show "drupal/${project_name}" --format=json --all)

    # Extract the required package names into an array, excluding drupal/core, drupal/ext-dom and anything without a slash like php extensions
    readarray -t required_packages < <(
      echo "$module_info" |
        jq -r '.requires | keys[] | select(test("/") and . != "drupal/core" and . != "drupal/ext-dom")'
    )

    # Install dependencies with Composer
    for package in "${required_packages[@]}"; do
      ddev composer require "$package" -W
    done

    # Do a check if this module requires a theme
    theme_query_result=$(is_a_theme_required);

    # If true then install it
    if [[ "$theme_query_result" != "no" ]]; then

      # Use the result to install the theme
      ddev composer require drupal/"$theme_query_result" -W

      # Enable the theme and set as default
      ddev drush theme:enable ${theme_required}
      ddev drush config:set ${theme_required}.settings logo.use_default 0 -y

      # Ask here if this is an admin theme or not
      get_theme_type "$theme_required"

      if [ "$theme_type" = "Admin" ]; then
        ddev drush config:set system.theme admin ${theme_required} -y
      else
        ddev drush config:set system.theme default ${theme_required} -y
      fi

    fi

    # Enable the module/theme
    ddev drush en "${project_name}" -y

    # Clear the cache
    ddev drush cr

    get_dev_modules
    get_dev_things

    if [ "$dev_things" = "Yes" ]; then
      set_dev_things
    fi

    if [ "${dev_modules}" = "Yes" ]; then
      install_dev_modules
    fi

    get_custom_module
    if [ "${custom_module}" = "Yes" ]; then
      create_custom_module
    fi

    get_custom_theme
    if [ "${custom_theme}" = "Yes" ]; then
      create_custom_theme
    fi

    get_git

    change_settings
    set_permissions
    export_config

    ddev drush cr
    enable_phpmyadmin
    yes | ddev restart
    git_add_and_commit

    if command -v figlet >/dev/null 2>&1; then
      echo -e "${GREEN}${BOLD}"
      figlet -f small "Finished"
      echo -e "${NC}"
    else
      echo "==== Finished ===="
    fi
    ;;
  themes)

    get_project_stable_version
    get_project_latest_drupal_version

    get_site_details "$basic_drupal_version"
    make_site_folder "$sitename"

    project_type="drupal${basic_drupal_version}"
    ddev config --project-type="$project_type" --docroot=web
    ddev start

    recommended_project="recommended-project:^${basic_drupal_version}"
    ddev composer create-project "drupal/${recommended_project}"

    get_drush_version "$basic_drupal_version"
    install_drush "$drush_version"

    ddev drush site:install --account-name=$username --account-pass=$password -y --site-name=$sitename
    ddev drush config:set system.site name "$sanitized_title" --yes

    make_folders_copy_files

    # Go into contrib folder and clone issue module or theme
    cd "web/${MT_project_type}/contrib/"

    # Setting up repository for the first time
    git_clone_url="https://git.drupalcode.org/project/${project_name}.git"

    # Setting up repository for the first time
    git clone ${git_clone_url}
    cd ${project_name}

    # Add & fetch this issue fork’s repository
    git remote add "${project_name}-${issue_number}" "git@git.drupal.org:issue/${project_name}-${issue_number}.git"
    git fetch "${project_name}-${issue_number}"

    search_pattern="${project_name}-${issue_number}/${issue_number}-"

    issue_branch=$(git branch -r | grep "${search_pattern}" | head -n 1 | sed 's/^[ *]*//')

    # Set the link_text
    link_text="${issue_branch#*/}"

    # Check out this branch for the first time
    git checkout -b "${link_text}" --track "${project_name}-${issue_number}/${link_text}"

    # CD back out of the directory
    cd ../../../../

    # Get dependencies from composer show
    module_info=$(ddev composer show "drupal/${project_name}" --format=json --all)

    # Extract the required package names into an array, excluding drupal/core, drupal/ext-dom and anything without a slash like php extensions
    readarray -t required_packages < <(
      echo "$module_info" |
        jq -r '.requires | keys[] | select(test("/") and . != "drupal/core" and . != "drupal/ext-dom")'
    )

    # Install dependencies with Composer
    for package in "${required_packages[@]}"; do
      ddev composer require "$package" -W
    done

    # Enable the theme and set as default
    ddev drush theme:enable ${project_name}
    ddev drush config:set ${project_name}.settings logo.use_default 0 -y

    # Ask here if this is an admin theme or not
    get_theme_type

    if [ "$theme_type" = "Admin" ]; then
      ddev drush config:set system.theme admin ${project_name} -y
    else
      ddev drush config:set system.theme default ${project_name} -y
    fi

    # Enable dependancies
    for element in "${required_modules[@]}"; do
      ddev drush en "${element}" -y
    done

    # Clear the cache
    ddev drush cr

    get_dev_modules
    get_dev_things

    if [ "$dev_things" = "Yes" ]; then
      set_dev_things
    fi

    if [ "${dev_modules}" = "Yes" ]; then
      install_dev_modules
    fi

    get_custom_module
    if [ "${custom_module}" = "Yes" ]; then
      create_custom_module
    fi

    get_custom_theme
    if [ "${custom_theme}" = "Yes" ]; then
      create_custom_theme
    fi

    get_git

    change_settings
    set_permissions
    export_config

    ddev drush cr
    enable_phpmyadmin
    yes | ddev restart
    git_add_and_commit

    if command -v figlet >/dev/null 2>&1; then
      echo -e "${GREEN}${BOLD}"
      figlet -f small "Finished"
      echo -e "${NC}"
    else
      echo "==== Finished ===="
    fi

    ;;
  # recipies)
  #   # Do some stuff to deal with recipies here at some point
  #   ;;
  *)
    echo "Invalid project type."
    ;;
  esac

fi

#########################################################
